function startdev() {
  LOGFILE="$HOME/nohup.out"

  if [ "$1" = "" ]; then
    echo 'Logs...'
    tail -f $LOGFILE
    exit;
  fi;


  for var in "$@"
  do
    case $var in
    redis)
      nohup redis-server /usr/local/etc/redis.conf 1>>$LOGFILE 2>&1 &
      ;;
    mongo)
      nohup mongod --dbpath=$HOME/data --port 27017 1>>$LOGFILE 2>&1 &
      ;;
    *)
      echo "Unexpected service $var"
      ;;
    esac
  done
  tail -f $LOGFILE
}

#speed test
function speedtest(){
  case $1 in
  10)
    POSTFIX=10
    ;;
  100)
    POSTFIX=100
    ;;
  500)
    POSTFIX=500
    ;;
  *)
    POSTFIX=10
    ;;
  esac
  wget -O /dev/null http://speedtest.wdc01.softlayer.com/downloads/test$POSTFIX.zip
}

# tail via ssh
function ssh_log(){
  case $2 in
  all)
    ssh $1 'cd /var/log; find . -type f \( -name "*.log" \) -exec tail -f "$file" {} +'
    exit 0;
    ;;
  *)
    TAIL_PATH=$2
    ;;
  esac
  ssh $1 "tail -f $TAIL_PATH -n 100"
}

# install oracle connector
function configure_oralce_connector(){
  DYLD_LIBRARY_PATH=/opt/oracle/instantclient_11_2 export DYLD_LIBRARY_PATH
  gem install ruby-oci8 -v 2.1.5
}

#ll with grep
function gll() {
  if [[ $2 == "" ]] then;
    dir=".";
  else
    dir=$2;
  fi;
  ls -lAh "$dir" | grep "$1"
}

# svn colordiff
function csvn() { svn "$@" | colordiff ;}

# Simple calculator
function calc() {
        math="%w(sin cos tan log log2 log10 sqrt).each {|m| define_method(m) { |*args| Math.send(m.to_sym, *args) } }"
        cmd="$math; a=($@); p a;"
        ruby -e "$cmd"
}

# Create a new directory and enter it
function mkd() {
  mkdir -p "$@" && cd "$@";
}

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
function targz() {
  local tmpFile="${@%/}.tar";
  tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1;

  size=$(
    stat -f"%z" "${tmpFile}" 2> /dev/null; # OS X `stat`
    stat -c"%s" "${tmpFile}" 2> /dev/null # GNU `stat`
  );

  local cmd="";
  if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
    # the .tar file is smaller than 50 MB and Zopfli is available; use it
    cmd="zopfli";
  else
    if hash pigz 2> /dev/null; then
      cmd="pigz";
    else
      cmd="gzip";
    fi;
  fi;

  echo "Compressing .tar using \`${cmd}\`…";
  "${cmd}" -v "${tmpFile}" || return 1;
  [ -f "${tmpFile}" ] && rm "${tmpFile}";
  echo "${tmpFile}.gz created successfully.";
}

# Determine size of a file or total size of a directory
function fs() {
  if du -b /dev/null > /dev/null 2>&1; then
    local arg=-sbh;
  else
    local arg=-sh;
  fi
  if [[ -n "$@" ]]; then
    du $arg -- "$@";
  else
    du $arg .[^.]* *;
  fi;
}

# Create a data URL from a file
function dataurl() {
  local mimeType=$(file -b --mime-type "$1");
  if [[ $mimeType == text/* ]]; then
    mimeType="${mimeType};charset=utf-8";
  fi
  echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
  local port="${1:-8888}";
  sleep 1 && open "http://localhost:${port}/" &
  # Set the default Content-Type to `text/plain` instead of `application/octet-stream`
  # And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
  python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nmap[".plist"] = "application/octet-stream";\nmap[".safariextz"] = "application/octet-stream";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port";
}

# Syntax-highlight JSON strings or files
# Usage: `json '{"foo":42}'` or `echo '{"foo":42}' | json`
function json() {
  if [ -t 0 ]; then # argument
    python -mjson.tool <<< "$*" | pygmentize -l javascript;
  else # pipe
    python -mjson.tool | pygmentize -l javascript;
  fi;
}

# `o` with no arguments opens the current directory, otherwise opens the given
# location
function o() {
  if [ $# -eq 0 ]; then
    open .;
  else
    open "$@";
  fi;
}

# `s` with no arguments opens the current directory in Sublime Text, otherwise
# opens the given location
function s() {
  if [ $# -eq 0 ]; then
    subl .;
  else
    subl "$@";
  fi;
}

function watch() {
  INTERVAL=$2

  if [ "$INTERVAL" == ""]; then
    INTERVAL=2
  fi;

  while :;
  do
  clear
  date
  $1
  sleep $2
  done
}

function http_state() {
  URL=$1
  curl -o /dev/null --silent --head --write-out '%{http_code}\n' $URL
}

function hosts() {
  MODE=$1
  HOST_NAME=$2
  IP_ADDRESS="127.0.0.1"
  if [ "$IP_ADDRESS" == "" ]; then
    IP_ADDRESS="127.0.0.1"
  fi;

  RULE="${IP_ADDRESS} ${HOST_NAME}"
  echo $RULE

  MATCHES_IN_HOSTS="$(grep -n $HOST_NAME /etc/hosts | cut -f1 -d:)"
  echo $MATCHES_IN_HOSTS

  case "$MODE" in
    "on")
      if [ ! -z "$MATCHES_IN_HOSTS" ]
      then
        echo "Updating existing hosts entry."
        # iterate over the line numbers on which matches were found
        while read -r line_number; do
            # replace the text of each line with the desired host entry
            sudo sed -i '' "${line_number}s/.*/${RULE} /" /etc/hosts
        done <<< "$MATCHES_IN_HOSTS"
      else
        echo "Adding new hosts entry."
        echo "$RULE" | sudo tee -a /etc/hosts > /dev/null
      fi
      ;;
    "off")
      if [ ! -z "$MATCHES_IN_HOSTS" ]
      then
        echo "Disable existing hosts entry."
        # iterate over the line numbers on which matches were found
        while read -r line_number; do
            # replace the text of each line with the desired host entry
            sudo sed -i '' "${line_number}s/.*/#${RULE} /" /etc/hosts
        done <<< "$MATCHES_IN_HOSTS"
      else
        echo "Nothing to remove"
      fi
      ;;
    "remove")
      if [ ! -z "$MATCHES_IN_HOSTS" ]
      then
        echo "Delete existing hosts entry."
        # iterate over the line numbers on which matches were found
        while read -r line_number; do
            # delete line
            echo $line_number
            sudo sed -i '' "${line_number}d" /etc/hosts
        done <<< "$MATCHES_IN_HOSTS"
      else
        echo "Nothing to remove"
      fi
      ;;
    *)
      echo "Unsupported option. Use: on, off, remove"
      exit 0
      ;;
  esac
  cat /etc/hosts
}
